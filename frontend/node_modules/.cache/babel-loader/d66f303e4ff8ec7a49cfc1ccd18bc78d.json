{"ast":null,"code":"import _objectWithoutProperties from\"/Users/rishabhgupta/Desktop/281_project/cmpe281_p2/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";import React from\"react\";import{connect}from\"react-redux\";import{Route,Redirect,withRouter}from\"react-router-dom\";//We'll use our custom Protected component to ensure users can only access certain information if they are logged in.\n//If the user visits a login or signup page, the Auth component will redirect them to tweets page if they are already logged in.\n// Passed in from parent component or from mapStateToProps\nvar Auth=function Auth(_ref){var Component=_ref.component,path=_ref.path,loggedIn=_ref.loggedIn,exact=_ref.exact;return/*#__PURE__*/React.createElement(Route,{path:path,exact:exact,render:function render(props){return!loggedIn?/*#__PURE__*/React.createElement(Component,props):/*#__PURE__*/ // Redirect to the home page if the user is authenticated\nReact.createElement(Redirect,{to:\"/open\"})//---------------------------------------------has not been created yet\n;}});};var Protected=function Protected(_ref2){var Component=_ref2.component,loggedIn=_ref2.loggedIn,rest=_objectWithoutProperties(_ref2,[\"component\",\"loggedIn\"]);return/*#__PURE__*/React.createElement(Route,Object.assign({},rest,{render:function render(props){return loggedIn?/*#__PURE__*/React.createElement(Component,props):/*#__PURE__*/ // Redirect to the login page if the user is already authenticated\nReact.createElement(Redirect,{to:\"/login\"});}}));};// Use the isAuthenitcated slice of state to determine whether a user is logged in\nvar mapStateToProps=function mapStateToProps(state){return{loggedIn:state.session.isAuthenticated};};export var AuthRoute=withRouter(connect(mapStateToProps)(Auth));export var ProtectedRoute=withRouter(connect(mapStateToProps)(Protected));","map":{"version":3,"sources":["/Users/rishabhgupta/Desktop/281_project/cmpe281_p2/frontend/src/util/route_util.js"],"names":["React","connect","Route","Redirect","withRouter","Auth","Component","component","path","loggedIn","exact","props","Protected","rest","mapStateToProps","state","session","isAuthenticated","AuthRoute","ProtectedRoute"],"mappings":"sMAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAASC,OAAT,KAAwB,aAAxB,CACA,OAASC,KAAT,CAAgBC,QAAhB,CAA0BC,UAA1B,KAA4C,kBAA5C,CACA;AACA;AAEA;AACA,GAAMC,CAAAA,IAAI,CAAG,QAAPA,CAAAA,IAAO,UAAcC,CAAAA,SAAd,MAAGC,SAAH,CAAyBC,IAAzB,MAAyBA,IAAzB,CAA+BC,QAA/B,MAA+BA,QAA/B,CAAyCC,KAAzC,MAAyCA,KAAzC,oBACX,oBAAC,KAAD,EACE,IAAI,CAAEF,IADR,CAEE,KAAK,CAAEE,KAFT,CAGE,MAAM,CAAE,gBAAAC,KAAK,QACX,CAACF,QAAD,cACE,oBAAC,SAAD,CAAeE,KAAf,CADF,eAGE;AACA,oBAAC,QAAD,EAAU,EAAE,CAAC,OAAb,EAAyB;AALhB,EAHf,EADW,EAAb,CAeA,GAAMC,CAAAA,SAAS,CAAG,QAAZA,CAAAA,SAAY,WAAcN,CAAAA,SAAd,OAAGC,SAAH,CAAyBE,QAAzB,OAAyBA,QAAzB,CAAsCI,IAAtC,6EAChB,oBAAC,KAAD,kBACMA,IADN,EAEE,MAAM,CAAE,gBAAAF,KAAK,QACXF,CAAAA,QAAQ,cACN,oBAAC,SAAD,CAAeE,KAAf,CADM,eAGN;AACA,oBAAC,QAAD,EAAU,EAAE,CAAC,QAAb,EALS,EAFf,GADgB,EAAlB,CAcA;AAEA,GAAMG,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,CAAAC,KAAK,QAAK,CAAEN,QAAQ,CAAEM,KAAK,CAACC,OAAN,CAAcC,eAA1B,CAAL,EAA7B,CAEA,MAAO,IAAMC,CAAAA,SAAS,CAAGd,UAAU,CAACH,OAAO,CAACa,eAAD,CAAP,CAAyBT,IAAzB,CAAD,CAA5B,CAEP,MAAO,IAAMc,CAAAA,cAAc,CAAGf,UAAU,CAACH,OAAO,CAACa,eAAD,CAAP,CAAyBF,SAAzB,CAAD,CAAjC","sourcesContent":["import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Route, Redirect, withRouter } from \"react-router-dom\";\n//We'll use our custom Protected component to ensure users can only access certain information if they are logged in.\n//If the user visits a login or signup page, the Auth component will redirect them to tweets page if they are already logged in.\n\n// Passed in from parent component or from mapStateToProps\nconst Auth = ({ component: Component, path, loggedIn, exact }) => (\n  <Route\n    path={path}\n    exact={exact}\n    render={props =>\n      !loggedIn ? (\n        <Component {...props} />\n      ) : (\n        // Redirect to the home page if the user is authenticated\n        <Redirect to=\"/open\" />  //---------------------------------------------has not been created yet\n      )\n    }\n  />\n);\n\nconst Protected = ({ component: Component, loggedIn, ...rest }) => (\n  <Route\n    {...rest}\n    render={props =>\n      loggedIn ? (\n        <Component {...props} />\n      ) : (\n        // Redirect to the login page if the user is already authenticated\n        <Redirect to=\"/login\" />\n      )\n    }\n  />\n);\n\n// Use the isAuthenitcated slice of state to determine whether a user is logged in\n\nconst mapStateToProps = state => ({ loggedIn: state.session.isAuthenticated });\n\nexport const AuthRoute = withRouter(connect(mapStateToProps)(Auth));\n\nexport const ProtectedRoute = withRouter(connect(mapStateToProps)(Protected));\n"]},"metadata":{},"sourceType":"module"}