{"ast":null,"code":"// src/actions/session_actions.js\nimport*as APIUtil from\"../util/session_api_util\";import jwt_decode from\"jwt-decode\";export var RECEIVE_CURRENT_USER=\"RECEIVE_CURRENT_USER\";export var RECEIVE_SESSION_ERRORS=\"RECEIVE_SESSION_ERRORS\";export var RECEIVE_USER_LOGOUT=\"RECEIVE_USER_LOGOUT\";export var RECEIVE_USER_SIGN_IN=\"RECEIVE_USER_SIGN_IN\";// We'll dispatch this when our user signs in\nexport var receiveCurrentUser=function receiveCurrentUser(currentUser){return{type:RECEIVE_CURRENT_USER,currentUser:currentUser};};// This will be used to redirect the user to the login page upon signup\nexport var receiveUserSignIn=function receiveUserSignIn(){return{type:RECEIVE_USER_SIGN_IN};};// We dispatch this one to show authentication errors on the frontend\nexport var receiveErrors=function receiveErrors(errors){return{type:RECEIVE_SESSION_ERRORS,errors:errors};};// When our user is logged out, we will dispatch this action to set isAuthenticated to false\nexport var logoutUser=function logoutUser(){return{type:RECEIVE_USER_LOGOUT};};// Upon signup, dispatch the approporiate action depending on which type of response we receieve from the backend\nexport var signup=function signup(user){return function(dispatch){return APIUtil.signup(user).then(function(){return dispatch(receiveUserSignIn());},function(err){return dispatch(receiveErrors(err.response.data));});};};// Upon login, set the session token and dispatch the current user. Dispatch errors on failure.\n//review of this on React 5 video\nexport var login=function login(user){return function(dispatch){return APIUtil.login(user).then(function(res){var token=res.data.token;//allows you to save token on the client side so user can use the same token upon refresh\nlocalStorage.setItem(\"jwtToken\",token);APIUtil.setAuthToken(token);var decoded=jwt_decode(token);dispatch(receiveCurrentUser(decoded));}).catch(function(err){dispatch(receiveErrors(err.response.data));});};};// We wrote this one earlier\nexport var logout=function logout(){return function(dispatch){localStorage.removeItem(\"jwtToken\");APIUtil.setAuthToken(false);dispatch(logoutUser());};};//to root reducer\n//or\n//session_api_util.js to create actual request","map":{"version":3,"sources":["/Users/rishabhgupta/Desktop/281_project/cmpe281_p2/frontend/src/actions/session_actions.js"],"names":["APIUtil","jwt_decode","RECEIVE_CURRENT_USER","RECEIVE_SESSION_ERRORS","RECEIVE_USER_LOGOUT","RECEIVE_USER_SIGN_IN","receiveCurrentUser","currentUser","type","receiveUserSignIn","receiveErrors","errors","logoutUser","signup","user","dispatch","then","err","response","data","login","res","token","localStorage","setItem","setAuthToken","decoded","catch","logout","removeItem"],"mappings":"AAAA;AAEA,MAAO,GAAKA,CAAAA,OAAZ,KAAyB,0BAAzB,CACA,MAAOC,CAAAA,UAAP,KAAuB,YAAvB,CAEA,MAAO,IAAMC,CAAAA,oBAAoB,CAAG,sBAA7B,CACP,MAAO,IAAMC,CAAAA,sBAAsB,CAAG,wBAA/B,CACP,MAAO,IAAMC,CAAAA,mBAAmB,CAAG,qBAA5B,CACP,MAAO,IAAMC,CAAAA,oBAAoB,CAAG,sBAA7B,CAEP;AACA,MAAO,IAAMC,CAAAA,kBAAkB,CAAG,QAArBA,CAAAA,kBAAqB,CAAAC,WAAW,QAAK,CAChDC,IAAI,CAAEN,oBAD0C,CAEhDK,WAAW,CAAXA,WAFgD,CAAL,EAAtC,CAKP;AACA,MAAO,IAAME,CAAAA,iBAAiB,CAAG,QAApBA,CAAAA,iBAAoB,SAAO,CACtCD,IAAI,CAAEH,oBADgC,CAAP,EAA1B,CAIP;AACA,MAAO,IAAMK,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,CAAAC,MAAM,QAAK,CACtCH,IAAI,CAAEL,sBADgC,CAEtCQ,MAAM,CAANA,MAFsC,CAAL,EAA5B,CAKP;AACA,MAAO,IAAMC,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,SAAO,CAC/BJ,IAAI,CAAEJ,mBADyB,CAAP,EAAnB,CAIP;AACA,MAAO,IAAMS,CAAAA,MAAM,CAAG,QAATA,CAAAA,MAAS,CAAAC,IAAI,QAAI,UAAAC,QAAQ,QACpCf,CAAAA,OAAO,CAACa,MAAR,CAAeC,IAAf,EAAqBE,IAArB,CACE,iBAAMD,CAAAA,QAAQ,CAACN,iBAAiB,EAAlB,CAAd,EADF,CAEE,SAAAQ,GAAG,QAAIF,CAAAA,QAAQ,CAACL,aAAa,CAACO,GAAG,CAACC,QAAJ,CAAaC,IAAd,CAAd,CAAZ,EAFL,CADoC,EAAZ,EAAnB,CAMP;AACA;AACA,MAAO,IAAMC,CAAAA,KAAK,CAAG,QAARA,CAAAA,KAAQ,CAAAN,IAAI,QAAI,UAAAC,QAAQ,QACnCf,CAAAA,OAAO,CAACoB,KAAR,CAAcN,IAAd,EACGE,IADH,CACQ,SAAAK,GAAG,CAAI,IACHC,CAAAA,KADG,CACOD,GAAG,CAACF,IADX,CACHG,KADG,CAEX;AACAC,YAAY,CAACC,OAAb,CAAqB,UAArB,CAAiCF,KAAjC,EACAtB,OAAO,CAACyB,YAAR,CAAqBH,KAArB,EACA,GAAMI,CAAAA,OAAO,CAAGzB,UAAU,CAACqB,KAAD,CAA1B,CACAP,QAAQ,CAACT,kBAAkB,CAACoB,OAAD,CAAnB,CAAR,CACD,CARH,EASGC,KATH,CASS,SAAAV,GAAG,CAAI,CACZF,QAAQ,CAACL,aAAa,CAACO,GAAG,CAACC,QAAJ,CAAaC,IAAd,CAAd,CAAR,CACD,CAXH,CADmC,EAAZ,EAAlB,CAcP;AACA,MAAO,IAAMS,CAAAA,MAAM,CAAG,QAATA,CAAAA,MAAS,SAAM,UAAAb,QAAQ,CAAI,CACtCQ,YAAY,CAACM,UAAb,CAAwB,UAAxB,EACA7B,OAAO,CAACyB,YAAR,CAAqB,KAArB,EACAV,QAAQ,CAACH,UAAU,EAAX,CAAR,CACD,CAJqB,EAAf,CAMP;AAEA;AAEA","sourcesContent":["// src/actions/session_actions.js\n\nimport * as APIUtil from \"../util/session_api_util\";\nimport jwt_decode from \"jwt-decode\";\n\nexport const RECEIVE_CURRENT_USER = \"RECEIVE_CURRENT_USER\";\nexport const RECEIVE_SESSION_ERRORS = \"RECEIVE_SESSION_ERRORS\";\nexport const RECEIVE_USER_LOGOUT = \"RECEIVE_USER_LOGOUT\";\nexport const RECEIVE_USER_SIGN_IN = \"RECEIVE_USER_SIGN_IN\";\n\n// We'll dispatch this when our user signs in\nexport const receiveCurrentUser = currentUser => ({\n  type: RECEIVE_CURRENT_USER,\n  currentUser\n});\n\n// This will be used to redirect the user to the login page upon signup\nexport const receiveUserSignIn = () => ({\n  type: RECEIVE_USER_SIGN_IN\n});\n\n// We dispatch this one to show authentication errors on the frontend\nexport const receiveErrors = errors => ({\n  type: RECEIVE_SESSION_ERRORS,\n  errors\n});\n\n// When our user is logged out, we will dispatch this action to set isAuthenticated to false\nexport const logoutUser = () => ({\n  type: RECEIVE_USER_LOGOUT\n});\n\n// Upon signup, dispatch the approporiate action depending on which type of response we receieve from the backend\nexport const signup = user => dispatch =>\n  APIUtil.signup(user).then(\n    () => dispatch(receiveUserSignIn()),\n    err => dispatch(receiveErrors(err.response.data))\n  );\n\n// Upon login, set the session token and dispatch the current user. Dispatch errors on failure.\n//review of this on React 5 video\nexport const login = user => dispatch =>\n  APIUtil.login(user)\n    .then(res => {\n      const { token } = res.data;\n      //allows you to save token on the client side so user can use the same token upon refresh\n      localStorage.setItem(\"jwtToken\", token);\n      APIUtil.setAuthToken(token);\n      const decoded = jwt_decode(token);\n      dispatch(receiveCurrentUser(decoded));\n    })\n    .catch(err => {\n      dispatch(receiveErrors(err.response.data));\n    });\n\n// We wrote this one earlier\nexport const logout = () => dispatch => {\n  localStorage.removeItem(\"jwtToken\");\n  APIUtil.setAuthToken(false);\n  dispatch(logoutUser());\n};\n\n//to root reducer\n\n//or\n\n//session_api_util.js to create actual request\n"]},"metadata":{},"sourceType":"module"}